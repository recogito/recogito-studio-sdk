import fs from 'node:fs';
import path from 'node:path';
import url from 'node:url';
import type { Extension } from './core';

const GENERATED_DIR = 'src/plugins/generated';

export const registerExtensions = (arg: Extension | Extension[], config: any, logger: any) => {
  const extensions = Array.isArray(arg) ? arg : [arg];

  extensions.forEach(e => 
    logger.info(`Registering extension: ${e.module_name}:${e.name}`));
  
  const registryDir = path.join(url.fileURLToPath(config.root), GENERATED_DIR);
  const registryFile = path.join(registryDir, 'registered.json');
  
  // Create registry dir if it doesn't exist
  fs.mkdirSync(registryDir, { recursive: true });

  let registry: Extension[] = [];
  try {
    registry = JSON.parse(fs.readFileSync(registryFile, 'utf-8'));
  } catch (e) {
    // File doesn't exist yet - start empty
  }

  const other = registry.filter(other => !extensions.some(e => e.module_name === other.module_name));
  other.push(...extensions);

  // Write re-exports for dynamic import
  extensions.forEach(e => {
    const src = 
      `/** auto-generated by @recogito/studio-sdk **/\n` +
      `import { ${e.component_name} } from '${e.module_name}/${e.component_name}';\n` + 
      `export default ${e.component_name}\n`;

    fs.writeFileSync(`${GENERATED_DIR}/${e.component_name}.ts`, src, { encoding: 'utf8' })
  });

  // Write registry
  fs.writeFileSync(registryFile, JSON.stringify(other, null, 2));
}